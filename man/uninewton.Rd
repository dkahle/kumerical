% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uninewton.R
\name{uninewton}
\alias{uninewton}
\title{Univariate Newton method}
\usage{
uninewton(f, df, x0, tol = 10 * .Machine$double.eps, maxit = 100L)
}
\arguments{
\item{f}{function}

\item{df}{function; derivative of f}

\item{x0}{initial value}

\item{tol}{tolerance, defaults to 10*.Machine$double.eps}

\item{maxit}{maximum number of iterations}
}
\value{
a list
}
\description{
Find the root of a function using Newton's method.
}
\examples{


uninewton(function(x) x^2 - 2, function(x) 2*x, 2)


f  <- function(x) x^2 - 2
df <- function(x) 2*x
x0 <- 2
(out <- uninewton(f, df, x0))

curve(f(x), col = "red", from = .9, to = 2.1)
with(out$evals, points(x, fx))
for(k in 1:out$n_evals) {
  with(out$evals, abline(a = fx[k] - dfx[k]*x[k], b = dfx[k], col = "blue"))
  Sys.sleep(1)
}





f <- sin
df <- cos
x0 <- 2
(out <- uninewton(f, df, x0))

curve(f(x), col = "red", from = 0, to = 2*pi)
with(out$evals, points(x, fx))
for(k in 1:out$n_evals) {
  with(out$evals, abline(a = fx[k] - dfx[k]*x[k], b = dfx[k], col = "blue"))
  Sys.sleep(1)
}




f <- log
df <- function(x) 1/x
x0 <- .40
(out <- uninewton(f, df, x0))

curve(f(x), col = "red", from = .25, to = 1.5)
with(out$evals, points(x, fx))
for(k in 1:out$n_evals) {
  with(out$evals, abline(a = fx[k] - dfx[k]*x[k], b = dfx[k], col = "blue"))
  Sys.sleep(1)
}



f <- function(x) (x-.24) * (x - .51) * (x - .76)
df <- function(x) 3*x^2 - 3.02*x + .6924
x0 <- .40
(out <- uninewton(f, df, x0))

curve(f(x), col = "red", from = .15, to = .85)
with(out$evals, points(x, fx))
for(k in 1:out$n_evals) {
  with(out$evals, abline(a = fx[k] - dfx[k]*x[k], b = dfx[k], col = "blue"))
  Sys.sleep(1)
}


}
